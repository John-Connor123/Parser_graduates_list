import matplotlib.figure
import matplotlib.pyplot as plt
import os
from os import listdir, makedirs, path
import pandas as pd
import numpy as np

import tkinter as tk
from PIL import ImageTk, Image
from tkinter import ttk


def entrant_data(students, without_exam, special_q, target_q, ed_progaram, points, operator):
    m = students[["№ п/п", "СНИЛС",
                  "Право поступления без вступительных испытаний",
                  "Поступление на места в рамках особой квоты для лиц, имеющих особое право",
                  "Поступление на места по целевой квоте", "Образовательная программа",
                  "Сумма конкурсных баллов"]]
    if without_exam == "1":
        m = m[m["Право поступления без вступительных испытаний"] != ""]
    if without_exam == "0":
        m = m[m["Право поступления без вступительных испытаний"] == ""]
    if special_q == "1":
        m = m[m["Поступление на места в рамках особой квоты для лиц, имеющих особое право"] == "+"]
    if special_q == "0":
        m = m[m["Поступление на места в рамках особой квоты для лиц, имеющих особое право"] == "-"]
    if target_q == "1":
        m = m[m["Поступление на места по целевой квоте"] == "+"]
    if target_q == "0":
        m = m[m["Поступление на места по целевой квоте"] == "-"]
    if ed_progaram in m["Образовательная программа"].values:
        m = m[m["Образовательная программа"] == ed_progaram]
    try:
        points = int(points)
    except ValueError:
        error_of_int = True
    else:
        error_of_int = False
    if error_of_int == False:
        m.loc[m["Сумма конкурсных баллов"] == "", "Сумма конкурсных баллов"] = 0
        m.loc[:, "Сумма конкурсных баллов"] = m["Сумма конкурсных баллов"].astype(int)
        if operator == '>':
            m = m[m["Сумма конкурсных баллов"] > points]
        elif operator == '<':
            m = m[m["Сумма конкурсных баллов"] < points]
        elif operator == '=':
            m = m[m["Сумма конкурсных баллов"] == points]
        elif operator == '<=':
            m = m[m["Сумма конкурсных баллов"] <= points]
        elif operator == '>=':
            m = m[m["Сумма конкурсных баллов"] >= points]
        elif operator == '<>':
            m = m[m["Сумма конкурсных баллов"] != points]
        elif operator == '<>=':
            pass
        else:
            m = m[m["Сумма конкурсных баллов"] > points]
    return m


def Get_SNILS_by_exam(students,exam, points, operator):
    if exam in students:
        m = students[["СНИЛС", exam, "Сумма конкурсных баллов"]]
        counts = {"< " + str(points): 0, "= " + str(points): 0, "> " + str(points): 0}
        m = m[~m[exam].isnull()]
        m = m[m[exam] != ""]
        m.loc[m[exam] == "", exam] = 0
        m.loc[:, exam] = m[exam].astype(int)
        figure = matplotlib.figure.Figure(figsize=(10, 10), dpi=100)
        plot = figure.add_subplot(212)
        plot.boxplot(m[[exam]], notch=True, showmeans=True, whis=1.5, vert=False, showfliers=False)
        try:
            points = int(points)
        except ValueError:
            error_of_int = True
        else:
            error_of_int = False
        if error_of_int == False:
            for score in m[exam]:
                if score < points:
                    counts["< " + str(points)] += 1
                elif score == points:
                    counts["= " + str(points)] += 1
                else:
                    counts["> " + str(points)] += 1
            if operator == '>':
                m = m[m[exam] > points]
            elif operator == '<':
                m = m[m[exam] < points]
            elif operator == '=':
                m = m[m[exam] == points]
            elif operator == '<=':
                m = m[m[exam] <= points]
            elif operator == '>=':
                m = m[m[exam] >= points]
            elif operator == '<>':
                m = m[m[exam] != points]
            elif operator == '<>=':
                pass
            else:
                m = m[m[exam] > points]
            m.reset_index(inplace=True, drop=True)
            plot1 = figure.add_subplot(211)
            plot1.pie(counts.values(), labels=counts.keys())
            m = m.sort_values(exam)
            return m, figure
    else:
        data = {"СНИЛС": ["Нет"],
                exam: ["0"],
                "Сумма конкурсных баллов": ["0"]}
        m = pd.DataFrame(data)
        n = m
        m.reset_index(inplace=True, drop=True)
        m = m.set_index("СНИЛС")
        m.loc[:, exam] = m[exam].astype(int)
        m.loc[:, "Сумма конкурсных баллов"] = m["Сумма конкурсных баллов"].astype(int)
        m.reset_index(inplace=True, drop=True)
        bar_graph = m.plot(figsize=(26, 25), kind="bar")
        figure = bar_graph.get_figure()
        return n, figure


def Places_for_education(students, name, budget, paid):
    m = students[["Образовательная программа", "Бюджетные места", "Платные места"]]
    m = m.drop_duplicates(subset='Образовательная программа', keep='first')
    m.reset_index(inplace=True, drop=True)
    if name in m["Образовательная программа"].values:
        m = m[m["Образовательная программа"] == name]
    else:
        pass
    if budget == True:
        m = m[m["Бюджетные места"] == "0"]
    if paid == True:
        m = m[m["Платные места"] == "0"]
    n = m
    isempty = n.empty
    if isempty == False:
        m.reset_index(inplace=True, drop=True)
        m = m.set_index("Образовательная программа")
        m.loc[:, "Бюджетные места"] = m["Бюджетные места"].astype(int)
        m.loc[:, "Платные места"] = m["Платные места"].astype(int)
        bar_graph = m.plot(figsize=(26, 25), kind="bar")
        figure = bar_graph.get_figure()
    else:
        data = {"Образовательная программа": ["Нет"],
                "Бюджетные места": ["0"],
                "Платные места": ["0"]}
        m = pd.DataFrame(data)
        n = m
        m.reset_index(inplace=True, drop=True)
        m = m.set_index("Образовательная программа")
        m.loc[:, "Бюджетные места"] = m["Бюджетные места"].astype(int)
        m.loc[:, "Платные места"] = m["Платные места"].astype(int)
        bar_graph = m.plot(figsize=(26, 25), kind="bar")
        figure = bar_graph.get_figure()
    return n, figure


def quota_program_breakdown(students):
    m = students[['№ п/п', 'Заявление о согласии на зачисление',
                  'Право поступления без вступительных испытаний',
                  'Поступление на места в рамках особой квоты для лиц, имеющих особое право',
                  'Поступление на места по целевой квоте',
                  'Сумма конкурсных баллов', 'Возврат документов',
                  'Образовательная программа', 'Бюджетные места',
                  'Платные места',
                  'Литература',
                  'Русский язык',
                  'Иностранный язык',
                  'История',
                  'Математика',
                  'Биология',
                  'Химия',
                  'Обществознание',
                  'Творческий конкурс Дизайн',
                  'Физика',
                  'География',
                  'Информатика',
                  'Творческий конкурс Медиа',
                  'Творческий конкурс Мода',
                  'Творческий конкурс I этап']]

    m = m.loc[m['Заявление о согласии на зачисление'] == '+']
    m = m.loc[m['Право поступления без вступительных испытаний'] == '']
    m = m.loc[m['Возврат документов'] == '-']
    m["Quota"] = np.where((m["Поступление на места по целевой квоте"] == "+") | (
            m["Поступление на места в рамках особой квоты для лиц, имеющих особое право"] == "+"), "Quota",
                          "No quota")
    m.drop(["Поступление на места по целевой квоте",
            "Поступление на места в рамках особой квоты для лиц, имеющих особое право",
            "Право поступления без вступительных испытаний", 'Возврат документов',
            'Заявление о согласии на зачисление', "№ п/п", "Бюджетные места", "Платные места",
            'Сумма конкурсных баллов'], axis=1, inplace=True)
    m = pd.melt(m, id_vars=['Образовательная программа', 'Quota'], value_vars=['Литература',
                                                                               'Русский язык',
                                                                               'Иностранный язык',
                                                                               'История',
                                                                               'Математика',
                                                                               'Биология',
                                                                               'Химия',
                                                                               'Обществознание',
                                                                               'Творческий конкурс Дизайн',
                                                                               'Физика',
                                                                               'География',
                                                                               'Информатика',
                                                                               'Творческий конкурс Медиа',
                                                                               'Творческий конкурс Мода',
                                                                               'Творческий конкурс I этап'])
    m.value[m.value == ""] = 0
    m["value"] = m.value.astype(float)
    n = pd.pivot_table(m, values='value', index=['Образовательная программа', 'Quota'], columns=['variable'],
                       aggfunc=np.mean)
    n.to_excel('./quota_program_breakdown.xlsx', na_rep='')


def quota_program_breakdown_for_treeview(students):
    m = students[['№ п/п', 'Заявление о согласии на зачисление',
                  'Право поступления без вступительных испытаний',
                  'Поступление на места в рамках особой квоты для лиц, имеющих особое право',
                  'Поступление на места по целевой квоте',
                  'Сумма конкурсных баллов', 'Возврат документов',
                  'Образовательная программа', 'Бюджетные места',
                  'Платные места',
                  'Литература',
                  'Русский язык',
                  'Иностранный язык',
                  'История',
                  'Математика',
                  'Биология',
                  'Химия',
                  'Обществознание',
                  'Творческий конкурс Дизайн',
                  'Физика',
                  'География',
                  'Информатика',
                  'Творческий конкурс Медиа',
                  'Творческий конкурс Мода',
                  'Творческий конкурс I этап']]
    m = m.loc[m['Заявление о согласии на зачисление'] == '+']
    m = m.loc[m['Право поступления без вступительных испытаний'] == '']
    m = m.loc[m['Возврат документов'] == '-']
    m["Quota"] = np.where((m["Поступление на места по целевой квоте"] == "+") | (
            m["Поступление на места в рамках особой квоты для лиц, имеющих особое право"] == "+"), "Quota",
                          "No quota")
    m.drop(["Поступление на места по целевой квоте",
            "Поступление на места в рамках особой квоты для лиц, имеющих особое право",
            "Право поступления без вступительных испытаний", 'Возврат документов',
            'Заявление о согласии на зачисление', "№ п/п", "Бюджетные места", "Платные места",
            'Сумма конкурсных баллов'], axis=1, inplace=True)
    m = pd.melt(m, id_vars=['Образовательная программа', 'Quota'], value_vars=['Литература',
                                                                               'Русский язык',
                                                                               'Иностранный язык',
                                                                               'История',
                                                                               'Математика',
                                                                               'Биология',
                                                                               'Химия',
                                                                               'Обществознание',
                                                                               'Творческий конкурс Дизайн',
                                                                               'Физика',
                                                                               'География',
                                                                               'Информатика',
                                                                               'Творческий конкурс Медиа',
                                                                               'Творческий конкурс Мода',
                                                                               'Творческий конкурс I этап'])
    m.value[m.value == ""] = 0
    m["value"] = m.value.astype(float)
    n = pd.pivot_table(m, values='value', index=['Образовательная программа', 'Quota'], columns=['variable'],
                       aggfunc=np.mean).reset_index()
    return (n)


def right_program_breakdown(students):
    m = students[['№ п/п', 'Заявление о согласии на зачисление',
                  'Право поступления без вступительных испытаний',
                  'Поступление на места в рамках особой квоты для лиц, имеющих особое право',
                  'Поступление на места по целевой квоте', 'Сумма конкурсных баллов',
                  'Возврат документов', 'Образовательная программа', 'Бюджетные места',
                  'Платные места',
                  'Литература',
                  'Русский язык',
                  'Иностранный язык',
                  'История',
                  'Математика',
                  'Биология',
                  'Химия',
                  'Обществознание',
                  'Творческий конкурс Дизайн',
                  'Физика',
                  'География',
                  'Информатика',
                  'Творческий конкурс Медиа',
                  'Творческий конкурс Мода',
                  'Творческий конкурс I этап']]
    m = m.loc[m['Заявление о согласии на зачисление'] == '+']
    m = m.loc[m['Поступление на места по целевой квоте'] == '-']
    m = m.loc[m['Поступление на места в рамках особой квоты для лиц, имеющих особое право'] == '-']
    m = m.loc[m['Возврат документов'] == '-']
    m["Right_to_no_exams"] = np.where((m['Право поступления без вступительных испытаний'] != ""), "No_exams",
                                      "No_right")
    m.drop(["Поступление на места по целевой квоте",
            "Поступление на места в рамках особой квоты для лиц, имеющих особое право",
            "Право поступления без вступительных испытаний",
            'Возврат документов',
            'Заявление о согласии на зачисление',
            "№ п/п",
            "Бюджетные места",
            "Платные места",
            'Сумма конкурсных баллов'], axis=1, inplace=True)
    m = pd.melt(m, id_vars=['Образовательная программа', 'Right_to_no_exams'], value_vars=['Литература',
                                                                                           'Русский язык',
                                                                                           'Иностранный язык',
                                                                                           'История',
                                                                                           'Математика',
                                                                                           'Биология',
                                                                                           'Химия',
                                                                                           'Обществознание',
                                                                                           'Творческий конкурс Дизайн',
                                                                                           'Физика',
                                                                                           'География',
                                                                                           'Информатика',
                                                                                           'Творческий конкурс Медиа',
                                                                                           'Творческий конкурс Мода',
                                                                                           'Творческий конкурс I этап'])
    m.value[m.value == ""] = 0
    m["value"] = m.value.astype(float)
    n = pd.pivot_table(m, values='value', index=['Образовательная программа', 'Right_to_no_exams'],
                       columns=['variable'], aggfunc=np.mean)
    n.to_excel('./right_program_breakdown.xlsx', na_rep='')


def right_program_breakdown_for_treeview(students):
    m = students[['№ п/п', 'Заявление о согласии на зачисление',
                  'Право поступления без вступительных испытаний',
                  'Поступление на места в рамках особой квоты для лиц, имеющих особое право',
                  'Поступление на места по целевой квоте', 'Сумма конкурсных баллов',
                  'Возврат документов', 'Образовательная программа', 'Бюджетные места',
                  'Платные места',
                  'Литература',
                  'Русский язык',
                  'Иностранный язык',
                  'История',
                  'Математика',
                  'Биология',
                  'Химия',
                  'Обществознание',
                  'Творческий конкурс Дизайн',
                  'Физика',
                  'География',
                  'Информатика',
                  'Творческий конкурс Медиа',
                  'Творческий конкурс Мода',
                  'Творческий конкурс I этап']]
    m = m.loc[m['Заявление о согласии на зачисление'] == '+']
    m = m.loc[m['Поступление на места по целевой квоте'] == '-']
    m = m.loc[m['Поступление на места в рамках особой квоты для лиц, имеющих особое право'] == '-']
    m = m.loc[m['Возврат документов'] == '-']
    m["Right_to_no_exams"] = np.where((m['Право поступления без вступительных испытаний'] != ""), "No_exams",
                                      "No_right")
    m.drop(["Поступление на места по целевой квоте",
            "Поступление на места в рамках особой квоты для лиц, имеющих особое право",
            "Право поступления без вступительных испытаний",
            'Возврат документов',
            'Заявление о согласии на зачисление',
            "№ п/п",
            "Бюджетные места",
            "Платные места",
            'Сумма конкурсных баллов'], axis=1, inplace=True)
    m = pd.melt(m, id_vars=['Образовательная программа', 'Right_to_no_exams'], value_vars=['Литература',
                                                                                           'Русский язык',
                                                                                           'Иностранный язык',
                                                                                           'История',
                                                                                           'Математика',
                                                                                           'Биология',
                                                                                           'Химия',
                                                                                           'Обществознание',
                                                                                           'Творческий конкурс Дизайн',
                                                                                           'Физика',
                                                                                           'География',
                                                                                           'Информатика',
                                                                                           'Творческий конкурс Медиа',
                                                                                           'Творческий конкурс Мода',
                                                                                           'Творческий конкурс I этап'])
    m.value[m.value == ""] = 0
    m["value"] = m.value.astype(float)
    n = pd.pivot_table(m, values='value', index=['Образовательная программа', 'Right_to_no_exams'],
                       columns=['variable'], aggfunc=np.mean).reset_index()
    return (n)